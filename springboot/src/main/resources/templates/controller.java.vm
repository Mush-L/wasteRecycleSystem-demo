package ${package.Controller};

import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.web.bind.annotation.*;

import javax.annotation.Resource;
import java.util.List;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;

import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
    #if(${superControllerClass})
    public class ${table.controllerName} extends ${superControllerClass} {
    #else
    public class ${table.controllerName} {
    #end

    @Resource
    private ${table.serviceName} ${table.entityPath}Service;

    // 新增或更新：返回布尔
    @PostMapping
    public Result save(@RequestBody ${entity} ${table.entityPath}){
        return Result.success(${table.entityPath}Service.saveOrUpdate(${table.entityPath}));
    }

    // 根据 id 删除：返回布尔
    @DeleteMapping("/{id}")
    public Result delete(@PathVariable Integer id){
        return Result.success(${table.entityPath}Service.removeById(id));
    }

    // 根据 id 数组批量删除：返回布尔
    @PostMapping("/del/batch")
    public Result deleteBatch(@RequestBody List<Integer> ids){
        return Result.success(${table.entityPath}Service.removeByIds(ids));
    }

    // 遍历数据库：返回列表
    @GetMapping
    public Result findAll(){
        return Result.success(${table.entityPath}Service.list());
    }

    // 根据 id 检索：返回对象
    @GetMapping("/{id}")
    public Result findOne(@PathVariable Integer id){
        return Result.success(${table.entityPath}Service.getById(id));
    }

    // 分页检索：返回列表
    @GetMapping("/page")
    public Result findPage(@RequestParam Integer pageNum,
                        @RequestParam Integer pageSize,
                        @RequestParam(defaultValue = "") String username){
        QueryWrapper<${entity}> queryWrapper=new QueryWrapper<>();
        queryWrapper.orderByDesc("id");
        if (!"".equals(username)) {
        queryWrapper.like("username", username);
        }
        return Result.success(${table.entityPath}Service.page(new Page<>(pageNum,pageSize),queryWrapper));
    }
}
#end